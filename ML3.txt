# pract3.1


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
import os

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score



iris = load_iris()
X, y = iris.data, iris.target


df = pd.DataFrame(X, columns=iris.feature_names)
df['target'] = y


print("Missing Values:\n", df.isnull().sum())


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)



scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)



model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)



y_pred = model.predict(X_test)


print("\nAccuracy Score:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))



cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6,4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=iris.target_names, yticklabels=iris.target_names)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')

# insted of ../result add your folder path
os.makedirs("../results", exist_ok=True)
plt.savefig("../results/confusion_matrix.png")
plt.close()


os.makedirs("../models", exist_ok=True)
joblib.dump(model, "../models/saved_model.pkl")
joblib.dump(scaler, "../models/scaler.pkl")



report = classification_report(y_test, y_pred, target_names=iris.target_names, output_dict=True)
report_df = pd.DataFrame(report).transpose()
report_df.to_csv("../results/classification_report.csv")




#pract 3.2


import joblib
import numpy as np



model = joblib.load("../models/saved_model.pkl")
scaler = joblib.load("../models/scaler.pkl")


new_sample = np.array([[5.1, 3.5, 1.4, 0.2]])



new_sample_scaled = scaler.transform(new_sample)



predicted_class = model.predict(new_sample_scaled)
predicted_proba = model.predict_proba(new_sample_scaled)


print(f"Predicted Class: {predicted_class[0]}")
print(f"Class Probabilities: {predicted_proba[0]}")


target_mapping = {0: "setosa", 1: "versicolor", 2: "virginica"}
print(f"Predicted Flower Type: {target_mapping[predicted_class[0]]}")