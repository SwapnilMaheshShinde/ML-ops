#pract 6

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
%matplotlib inline



from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import (
    confusion_matrix,
    ConfusionMatrixDisplay,
    precision_recall_curve,
    PrecisionRecallDisplay,
    classification_report
)



os.makedirs('../results', exist_ok=True)




df = sns.load_dataset('titanic')



df.head()



df.info()




df.isnull().sum()






# Fill 'age' missing values
df['age'] = df['age'].fillna(df['age'].median())

# Fill 'embarked' missing values
df['embarked'] = df['embarked'].fillna(df['embarked'].mode()[0])

# Drop unnecessary columns
df = df.drop(['deck', 'embark_town'], axis=1)



# Verify again
df.isnull().sum()







df['sex'] = df['sex'].map({'male': 0, 'female': 1})
df['embarked'] = df['embarked'].map({'C': 0, 'Q': 1, 'S': 2})




X = df[['pclass', 'sex', 'age', 'fare', 'embarked']]
y = df['survived']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Logistic Regression
lr_model = LogisticRegression(max_iter=1000)
lr_model.fit(X_train, y_train)


# Random Forest
rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train, y_train)

# Predictions
y_pred_lr = lr_model.predict(X_test)
y_pred_rf = rf_model.predict(X_test)


# Logistic Regression Confusion Matrix
cm_lr = confusion_matrix(y_test, y_pred_lr)
disp_lr = ConfusionMatrixDisplay(confusion_matrix=cm_lr)
disp_lr.plot()
plt.title("Confusion Matrix - Logistic Regression")
plt.savefig('../results/confusion_matrix_logistic_regression.png')
plt.close()



# Random Forest Confusion Matrix
cm_rf = confusion_matrix(y_test, y_pred_rf)
disp_rf = ConfusionMatrixDisplay(confusion_matrix=cm_rf)
disp_rf.plot()
plt.title("Confusion Matrix - Random Forest")
plt.savefig('../results/confusion_matrix_random_forest.png')
plt.close()


# Precision-Recall for Logistic Regression
y_scores_lr = lr_model.predict_proba(X_test)[:, 1]
precision_lr, recall_lr, _ = precision_recall_curve(y_test, y_scores_lr)

disp_pr_lr = PrecisionRecallDisplay(precision=precision_lr, recall=recall_lr)
disp_pr_lr.plot()
plt.title("Precision-Recall Curve - Logistic Regression")
plt.savefig('../results/precision_recall_logistic_regression.png')
plt.close()



# Precision-Recall for Random Forest
y_scores_rf = rf_model.predict_proba(X_test)[:, 1]
precision_rf, recall_rf, _ = precision_recall_curve(y_test, y_scores_rf)

disp_pr_rf = PrecisionRecallDisplay(precision=precision_rf, recall=recall_rf)
disp_pr_rf.plot()
plt.title("Precision-Recall Curve - Random Forest")
plt.savefig('../results/precision_recall_random_forest.png')
plt.close()




# Classification Reports
print("Logistic Regression Report:")
print(classification_report(y_test, y_pred_lr))

print("\nRandom Forest Report:")
print(classification_report(y_test, y_pred_rf))



